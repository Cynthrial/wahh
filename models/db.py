from flask import  Blueprintfrom models.waf_log import Waf_log, linkfrom sqlalchemy import and_import datetimedb = Blueprint('db', __name__)@db.route('/insert')def insert():    me = Waf_log(major='society', male=False)    link.session.add(me)    link.session.commit()    return me.majordef select(start_time, end_time, select_method, mod_type):    begin = start_time    end = end_time    mod = mod_type    method = select_method    if begin == "":        begin = datetime.datetime.now().strftime('%Y-%m-%d')    if end == "":        end = datetime.datetime.now() + datetime.timedelta(days=1)        end = end.strftime('%Y-%m-%d')    # me = Waf_log.query.filter(Waf_log.no > local_method).all()    # me = Waf_log.query.filter(Waf_log.method.like(local_method+'%')).all()    # session.query(func.count(distinct(User.name)))    # me = Waf_log.query.filter(Waf_log.waf_log.like('%'+local_method+'%')).count()    me = Waf_log.query.filter(and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%' + mod + '%'),                                   Waf_log.method.like('%' + method + '%'))).all()    return me@db.route('/create')def create():    link.create_all()    return "success"def cmpaer(x, y):    return x[1] > y[1]# @db.route('/fourskyblade')def four_sky_blade():    begin = datetime.datetime.now().strftime('%Y-%m-%d')    end = datetime.datetime.now() + datetime.timedelta(days=1)    end = end.strftime('%Y-%m-%d')    arg_value = Waf_log.query.filter(and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%arg%'))).count()    posts_value = Waf_log.query.filter(and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%post%'))).count()    url_value = Waf_log.query.filter(and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%url%'))).count()    useragent_value = Waf_log.query.filter(        and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%useragent%'))).count()    cookie_value = Waf_log.query.filter(        and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%cookie%'))).count()    ip_value = Waf_log.query.filter(and_(Waf_log.time.between(begin, end), Waf_log.waf_log.like('%ip%'))).count()    dict = {        'args': arg_value,        'posts': posts_value,        'url': url_value,        'useragent': useragent_value,        'cookie': cookie_value,        'ip': ip_value,    }    real_value = sorted(dict.items(), key=lambda x: x[1], reverse=True)    return real_value